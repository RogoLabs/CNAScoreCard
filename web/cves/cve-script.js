// CVE List Page Script - for displaying top/bottom CVE lists
// Adapted from CNA detail page functionality

let cveData = [];
let filteredCVEs = [];

// Function to load CVE data based on list type
async function loadCVEData() {
    try {
        const dataFile = CVE_LIST_TYPE === 'top100' ? '../data/top100_cves.json' : '../data/bottom100_cves.json';
        const response = await fetch(dataFile);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (!Array.isArray(data)) {
            throw new Error('Invalid data format - expected array');
        }
        
        cveData = data;
        filteredCVEs = [...cveData];
        
        // Sort by score initially (highest first for top100, lowest first for bottom100)
        if (CVE_LIST_TYPE === 'top100') {
            filteredCVEs.sort((a, b) => (b.totalEasScore || 0) - (a.totalEasScore || 0));
        } else {
            filteredCVEs.sort((a, b) => (a.totalEasScore || 0) - (b.totalEasScore || 0));
        }
        
        displayCVEHeader();
        displayCVECards(filteredCVEs);
        setupEventListeners();
        
    } catch (error) {
        console.error('Error loading CVE data:', error);
        document.getElementById('loading').innerHTML = `
            <div class="error-message">
                <h3>Error Loading Data</h3>
                <p>Could not load ${CVE_LIST_TYPE} CVE data. Please try refreshing the page.</p>
                <p><small>Error: ${error.message}</small></p>
            </div>
        `;
    }
}

// Function to display CVE header
function displayCVEHeader() {
    document.getElementById('loading').style.display = 'none';
    document.getElementById('cveHeader').style.display = 'block';
    document.getElementById('cveSection').style.display = 'block';
}

// Helper to format numbers (hide .0 if integer, even if string)
function formatNumber(num) {
    if (typeof num === 'string' && num.match(/^\d+\.0$/)) return num.replace('.0', '');
    if (typeof num === 'number') {
        if (num % 1 === 0) return num.toString();
        return parseFloat(num.toFixed(1)).toString();
    }
    return num;
}

// Function to get score class for styling
function getScoreClass(score) {
    if (score >= 80) return 'score-excellent';
    if (score >= 60) return 'score-good';
    if (score >= 40) return 'score-fair';
    return 'score-poor';
}

// Function to format date
function formatDate(dateString) {
    if (!dateString) return 'N/A';
    try {
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'short', 
            day: 'numeric' 
        });
    } catch (e) {
        return dateString;
    }
}

// Function to display CVE cards
function displayCVECards(cves) {
    const container = document.getElementById('cveCards');
    
    if (cves.length === 0) {
        container.innerHTML = '<div class="no-results">No CVEs found matching your criteria.</div>';
        return;
    }
    
    container.innerHTML = cves.map(cve => {
        const score = cve.totalEasScore || 0;
        const scoreClass = getScoreClass(score);
        const breakdown = cve.scoreBreakdown || {};
        
        return `
            <div class="cve-card ${scoreClass}">
                <div class="cve-header">
                    <div class="cve-id">
                        <a href="https://www.cve.org/CVERecord?id=${cve.cveId}" target="_blank">${cve.cveId}</a>
                    </div>
                    <div class="cve-meta">
                        <div class="cve-score">${formatNumber(score)}/100</div>
                        <div class="cve-cna">${cve.assigningCna || 'Unknown CNA'}</div>
                        <div class="cve-date">${formatDate(cve.datePublished)}</div>
                    </div>
                </div>
                <div class="cve-details">
                    <div class="cve-detail-item">
                        <span class="cve-detail-label">Foundational:</span>
                        <span class="cve-detail-value">${formatNumber(breakdown.foundationalCompleteness || 0)}/30</span>
                    </div>
                    <div class="cve-detail-item">
                        <span class="cve-detail-label">Root Cause:</span>
                        <span class="cve-detail-value">${formatNumber(breakdown.rootCauseAnalysis || 0)}/10</span>
                    </div>
                    <div class="cve-detail-item">
                        <span class="cve-detail-label">Software ID:</span>
                        <span class="cve-detail-value">${formatNumber(breakdown.softwareIdentification || 0)}/10</span>
                    </div>
                    <div class="cve-detail-item">
                        <span class="cve-detail-label">Severity:</span>
                        <span class="cve-detail-value">${formatNumber(breakdown.severityAndImpactContext || 0)}/25</span>
                    </div>
                    <div class="cve-detail-item">
                        <span class="cve-detail-label">Actionable:</span>
                        <span class="cve-detail-value">${formatNumber(breakdown.actionableIntelligence || 0)}/20</span>
                    </div>
                    <div class="cve-detail-item">
                        <span class="cve-detail-label">Format:</span>
                        <span class="cve-detail-value">${formatNumber(breakdown.dataFormatAndPrecision || 0)}/5</span>
                    </div>
                </div>
            </div>
        `;
    }).join('');
}

// Function to filter and sort CVEs
function filterAndSortCVEs() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const sortBy = document.getElementById('sortSelect').value;
    
    // Filter CVEs
    filteredCVEs = cveData.filter(cve => {
        const cveId = (cve.cveId || '').toLowerCase();
        const cnaName = (cve.assigningCna || '').toLowerCase();
        return cveId.includes(searchTerm) || cnaName.includes(searchTerm);
    });
    
    // Sort CVEs
    filteredCVEs.sort((a, b) => {
        switch (sortBy) {
            case 'score':
                if (CVE_LIST_TYPE === 'top100') {
                    return (b.totalEasScore || 0) - (a.totalEasScore || 0);
                } else {
                    return (a.totalEasScore || 0) - (b.totalEasScore || 0);
                }
            case 'cveId':
                return (a.cveId || '').localeCompare(b.cveId || '');
            case 'cna':
                return (a.assigningCna || '').localeCompare(b.assigningCna || '');
            case 'date':
                return new Date(b.datePublished || 0) - new Date(a.datePublished || 0);
            default:
                return 0;
        }
    });
    
    displayCVECards(filteredCVEs);
}

// Setup event listeners
function setupEventListeners() {
    const searchInput = document.getElementById('searchInput');
    const sortSelect = document.getElementById('sortSelect');
    
    searchInput.addEventListener('input', filterAndSortCVEs);
    sortSelect.addEventListener('change', filterAndSortCVEs);
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    loadCVEData();
});